using Laplacians

# This file generates the Markdown documentation files.
# It is a modificaton of the build.jl file from LightGraph.jl

# The @file macro generates the documentation for a particular file
# where the {{method1, methods2}} includes the documentation for each method
# via the `buildwriter` function.

# Currently this prints the methodtable followed by the docstring.

macro file(args...) buildfile(args...) end

buildfile(t, s::AbstractString) = buildfile(t, Expr(:string, s))

buildfile(target, source::Expr) = quote
    open(joinpath(dirname(@__FILE__), $(esc(target))), "w") do file
        println(" - '$($(esc(target)))'")
        println(file, "<!-- AUTOGENERATED. See 'doc/build.jl' for source. -->")
        $(Expr(:block, [buildwriter(arg) for arg in source.args]...))
    end
end

buildwriter(ex::Expr) = :(print(file, $(esc(ex))))

buildwriter(t::AbstractString) = Expr(:block,
    [buildwriter(p, iseven(n)) for (n, p) in enumerate(split(t, r"^{{|\n{{|}}\s*(\n|$)"))]...
)

buildwriter(part, isdef) = isdef ?
    begin
        parts = Expr(:vect, [:(($(parse(p))), @doc($(parse(p)))) for p in split(part, r"\s*,\s*")]...)
        quote
            for (f, docstring) in $(esc(parts))
                if isa(f, Function)
                    md_methodtable(file, f)
                end
                writemime(file, "text/plain", docstring)
                println(file)
            end
        end
    end :
    :(print(file, $(esc(part))))

function md_methodtable(io, f)
    println(io, "### ", first(methods(f)).func.code.name)
    println(io, "```")
    for m in methods(f)
        md_method(io, m)
    end
    println(io, "```")
end
function md_method(io, m)
    # We only print methods with are defined in the parent (project) directory
#= DAS commented this out
    pd = joinpath(Pkg.dir(), string(module_name(Laplacians)))
    if !(startswith(string(m.func.code.file), pd))
        return
    end
=#
    print(io, m.func.code.name)
    tv, decls, file, line = Base.arg_decl_parts(m)
    if !isempty(tv)
        Base.show_delim_array(io, tv, '{', ',', '}', false)
    end
    print(io, "(")
    print_joined(io, [isempty(d[2]) ? "$(d[1])" : "$(d[1])::$(d[2])" for d in decls],
                 ", ", ", ")
    print(io, ")")
    println(io)
end

@file "about.md" "{{Laplacians}}"


@file "generators.md" """
The following is a list of the graph generators.

## Deterministic

{{completeGraph, pathGraph, ringGraph, generalizedRing, hyperCube, completeBinaryTree, grid2, grid2coords}}

## Random
These are randomized graph generators.
            
{{randMatching, randRegular, grownGraph, grownGraphD, prefAttach, generalizedNecklace}}
"""

